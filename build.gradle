apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven'

group = 'groovy-swt'
project.buildDir = 'target'

defaultTasks 'build' // check

sourceCompatibility = 1.8
version = '0.96-es-2009'

repositories {
    mavenCentral()
    maven {  url "${rootDir}/src/repository" }
}

dependencies {
    //compile 'org.codehaus.groovy:groovy:2.4.11'
    compile 'commons-logging:commons-logging:1.1'
    compile 'org.codehaus.groovy:groovy-all:2.4.11'
    testCompile 'junit:junit:3.8.1'
    // Eclipse stuff
        compile 'com.ibm:icu:67.1.0.v20200706-1749'
        compile 'org.eclipse.core:commands:3.9.700.v20191217-1850'
        compile 'org.eclipse.core:databinding:1.10.0.v20200815-1752'
        compile 'org.eclipse.core.databinding:beans:1.7.0.v20200717-1533'
        compile 'org.eclipse.core.databinding:observable:1.10.0.v20200730-0848'
        compile 'org.eclipse.core.databinding:property:1.8.100.v20200619-0651'
        compile 'org.eclipse.equinox:common:3.13.0.v20200828-1034'
        compile 'org.eclipse:jface:3.21.0.v20200821-1458'
        compile 'org.eclipse.jface:databinding:1.12.0.v20200717-1533'
        compile 'org.eclipse:osgi:3.16.0.v20200828-0759'
        compile 'org.eclipse.swt.win32.win32:x86_64:3.115.0.v20200831-1002'
        compile 'org.eclipse.ui:forms:3.10.0.v20200727-0948'    
    // migLayout
    compile 'com.miglayout:miglayout-swt:4.2'
    // ASM for the opcodes used in the AST @Bindable
    compile group: 'asm', name: 'asm', version: '3.2'
	
	
}

configurations {
    windowsAll {
        extendsFrom compile
        exclude group:'org.codehaus.groovy'
        // commons-logging already in groovy-all
        exclude group:'commons-logging'
        // antlr also part of groovy-all
        exclude group:'antlr'
    }
    withoutSwt {
        extendsFrom windowsAll
        exclude group:'org.eclipse.swt.win32.win32', module:'x86'
    }
}

task withoutSwt(type: Jar)  {
    classifier='without-swt'
    def classpath = configurations.withoutSwt.collect { it.directory ? it : zipTree(it) }
    from sourceSets.main.output
    from classpath
      exclude 'META-INF/**'
      exclude 'about_files/**'
      exclude 'licenses/**'
      exclude '*.properties'
      exclude '*.profile'
      exclude 'about.html'
      exclude '.api_description'
}

task windowsAll (type: Jar) {
    dependsOn 'withoutSwt'
    classifier='windows-all'
    def cp = configurations.compile.collect { it }
                .findAll { it.toString() =~ /org.eclipse.swt/}
                .collect { it.directory ? it : zipTree(it) }
    def swt = zipTree("${libsDir}/groovy-swt-$version-without-swt.jar")
    from swt
    from cp                
      exclude 'META-INF/**'
}

artifacts {
	archives withoutSwt
	archives windowsAll
}


/**
 * Check the eclipse directory for new version of the dependencies
 */
task newEclipseLibs()  {
	doLast {
		def items = configurations.compile.dependencies.findAll { it.group.toString() =~ /org.eclipse/}
		def eclipseDir = new File('c:/pr/downloads/temp/eclipse')
		def files = eclipseDir.list().findAll {it =~ /org.eclipse.*jar$/}
		// find updated items
		def newItems = []
		items.each { item ->
			def name = "${item.group}\\.${item.name}_"
			def versions = files.findAll {it =~ /${name}/}
			 				.collect {(it =~ /${name}(.*)\.jar/)[0][1]}
			assert versions.size() == 1
			println "${item.version}==$versions[0]"
			if (item.version != versions[0]) {
				newItems << [group: item.group, name:item.name, version:versions[0], filename:"${item.group}.${item.name}_${versions[0]}.jar"]
			}
		}
		// mvn install them
		println "**** NO UPDATES: ${newItems.size()}"
		newItems.each {
			println "Installing: $it"
			def cmd = "cmd /c mvn org.apache.maven.plugins:maven-install-plugin:2.3.1:install-file -DgroupId=${it.group} -DartifactId=${it.name} -Dversion=${it.version} -Dfile=${eclipseDir.absolutePath}/${it.filename} -Dpackaging=jar -DgeneratePom=true -DlocalRepositoryPath=/pr/projekter/java/groovy-swt/src/repository"
			println cmd
			cmd.execute()
		}
		println "********** UPDATE FOR build.gradle **************"
		newItems.each {
			println "\tcompile '${it.group}:${it.name}:${it.version}'"
		}
	}
}